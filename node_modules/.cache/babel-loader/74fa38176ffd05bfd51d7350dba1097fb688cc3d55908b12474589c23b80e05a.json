{"ast":null,"code":"// Email service for TechPillar contact form\n// This service handles sending professional emails to pro.zainajmal@gmail.com\n\nimport emailjs from '@emailjs/browser';\n\n// Email configuration\nconst EMAIL_CONFIG = {\n  to: 'pro.zainajmal@gmail.com',\n  from: 'zany0381@gmail.com',\n  // This will be your sending email\n  subjectPrefix: 'New Service Inquiry: '\n};\n\n// WORKING EMAILJS CONFIGURATION - Replace these with your actual IDs\n// To get these IDs, follow the QUICK_EMAIL_SETUP.md guide\nconst EMAILJS_CONFIG = {\n  serviceId: 'service_dh3ywir',\n  // Replace with your actual service ID\n  templateId: 'template_odgf7en',\n  // Replace with your actual template ID\n  userId: 'mdymL1mtK3BTTYscN' // Replace with your actual user ID\n};\n\n// TEST MODE: Set this to false when you have real EmailJS credentials\nconst TEST_MODE = false;\n\n// Professional email template generator\nexport const generateEmailTemplate = (formData, serviceOptions) => {\n  var _serviceOptions$find;\n  const serviceLabel = ((_serviceOptions$find = serviceOptions.find(opt => opt.value === formData.service)) === null || _serviceOptions$find === void 0 ? void 0 : _serviceOptions$find.label) || formData.service;\n  const company = formData.company || 'Individual';\n  const timestamp = new Date().toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n  return {\n    to: EMAIL_CONFIG.to,\n    from: EMAIL_CONFIG.from,\n    replyTo: formData.email,\n    // Allow direct reply to the customer\n    subject: `${EMAIL_CONFIG.subjectPrefix}${serviceLabel} - ${company}`,\n    html: `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>New Service Inquiry - TechPillar</title>\n        <style>\n          body { \n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n            line-height: 1.6; \n            color: #333; \n            margin: 0; \n            padding: 0; \n            background-color: #f8fafc;\n          }\n          .container { \n            max-width: 600px; \n            margin: 0 auto; \n            background: white;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            border-radius: 12px;\n            overflow: hidden;\n          }\n          .header { \n            background: linear-gradient(135deg, #60A5FA 0%, #93C5FD 100%); \n            color: white; \n            padding: 40px 30px; \n            text-align: center; \n          }\n          .header h1 { \n            margin: 0 0 10px 0; \n            font-size: 28px; \n            font-weight: 700;\n          }\n          .header p { \n            margin: 0; \n            font-size: 16px; \n            opacity: 0.9;\n          }\n          .content { \n            padding: 40px 30px; \n            background: white;\n          }\n          .field { \n            margin-bottom: 25px; \n          }\n          .label { \n            font-weight: 600; \n            color: #1e293b; \n            margin-bottom: 8px; \n            display: block; \n            font-size: 14px;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n          }\n          .value { \n            background: #f8fafc; \n            padding: 16px; \n            border-radius: 8px; \n            border-left: 4px solid #60A5FA; \n            font-size: 16px;\n            color: #334155;\n          }\n          .cta-section { \n            text-align: center; \n            margin: 40px 0; \n            padding: 30px;\n            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n            border-radius: 12px;\n          }\n          .cta-button { \n            background: #60A5FA; \n            color: white; \n            padding: 16px 32px; \n            text-decoration: none; \n            border-radius: 8px; \n            display: inline-block; \n            font-weight: 600;\n            font-size: 16px;\n            transition: all 0.3s ease;\n          }\n          .cta-button:hover { \n            background: #3B82F6; \n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(96, 165, 250, 0.3);\n          }\n          .footer { \n            text-align: center; \n            margin-top: 40px; \n            color: #64748b; \n            font-size: 14px; \n            padding: 30px;\n            background: #f8fafc;\n            border-top: 1px solid #e2e8f0;\n          }\n          .priority-badge {\n            display: inline-block;\n            background: #ef4444;\n            color: white;\n            padding: 4px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            margin-left: 12px;\n          }\n          .service-badge {\n            display: inline-block;\n            background: #10b981;\n            color: white;\n            padding: 6px 16px;\n            border-radius: 20px;\n            font-size: 14px;\n            font-weight: 600;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>üöÄ New Service Inquiry</h1>\n            <p>TechPillar has received a new service request</p>\n          </div>\n          \n          <div class=\"content\">\n            <div class=\"field\">\n              <span class=\"label\">üë§ Contact Person</span>\n              <div class=\"value\">${formData.name}</div>\n            </div>\n            \n            <div class=\"field\">\n              <span class=\"label\">üìß Email Address</span>\n              <div class=\"value\">${formData.email}</div>\n            </div>\n            \n            ${formData.company ? `\n            <div class=\"field\">\n              <span class=\"label\">üè¢ Company</span>\n              <div class=\"value\">${formData.company}</div>\n            </div>\n            ` : ''}\n            \n            <div class=\"field\">\n              <span class=\"label\">üéØ Service Interest</span>\n              <div class=\"value\">\n                <span class=\"service-badge\">${serviceLabel}</span>\n              </div>\n            </div>\n            \n            <div class=\"field\">\n              <span class=\"label\">üí¨ Project Details</span>\n              <div class=\"value\">${formData.message.replace(/\\n/g, '<br>')}</div>\n            </div>\n            \n            <div class=\"cta-section\">\n              <h3 style=\"margin: 0 0 20px 0; color: #1e293b;\">Ready to respond?</h3>\n              <a href=\"mailto:${formData.email}?subject=Re: ${EMAIL_CONFIG.subjectPrefix}${serviceLabel}\" class=\"cta-button\">\n                üìß Reply to ${formData.name}\n              </a>\n              <p style=\"margin: 15px 0 0 0; font-size: 14px; color: #64748b;\">\n                Click the button above to send a direct reply\n              </p>\n            </div>\n          </div>\n          \n          <div class=\"footer\">\n            <p><strong>This inquiry was sent from the TechPillar contact form</strong></p>\n            <p>üìÖ Received on ${timestamp}</p>\n            <p>üìç Form submitted from TechPillar website</p>\n            <hr style=\"border: none; border-top: 1px solid #e2e8f0; margin: 20px 0;\">\n            <p style=\"font-size: 12px; color: #94a3b8;\">\n              TechPillar Technology Solutions<br>\n              Empowering businesses through innovative technology\n            </p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\nNew Service Inquiry - TechPillar\n\nContact Person: ${formData.name}\nEmail Address: ${formData.email}\n${formData.company ? `Company: ${formData.company}\\n` : ''}Service Interest: ${serviceLabel}\n\nProject Details:\n${formData.message}\n\n---\nThis inquiry was sent from the TechPillar contact form on ${timestamp}.\nReply directly to: ${formData.email}\n    `\n  };\n};\n\n// Main email sending function using EmailJS\nexport const sendContactFormEmail = async (formData, serviceOptions) => {\n  try {\n    var _serviceOptions$find4, _serviceOptions$find5;\n    // TEST MODE: If enabled, just simulate email sending\n    if (TEST_MODE) {\n      var _serviceOptions$find2, _serviceOptions$find3;\n      console.log('üß™ TEST MODE: Simulating email sending...');\n      const emailData = generateEmailTemplate(formData, serviceOptions);\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log('üìß TEST MODE: Email would be sent to:', emailData.to);\n      console.log('üìß TEST MODE: Subject:', emailData.subject);\n      console.log('üìß TEST MODE: From:', formData.email);\n      console.log('üìß TEST MODE: Service:', (_serviceOptions$find2 = serviceOptions.find(opt => opt.value === formData.service)) === null || _serviceOptions$find2 === void 0 ? void 0 : _serviceOptions$find2.label);\n      console.log('üìß TEST MODE: Message:', formData.message);\n\n      // Show alert with email details (for testing)\n      alert(`üß™ TEST MODE: Email would be sent to pro.zainajmal@gmail.com\\n\\nSubject: ${emailData.subject}\\nFrom: ${formData.email}\\nService: ${(_serviceOptions$find3 = serviceOptions.find(opt => opt.value === formData.service)) === null || _serviceOptions$find3 === void 0 ? void 0 : _serviceOptions$find3.label}\\n\\nTo get real emails, follow the setup guide in QUICK_EMAIL_SETUP.md`);\n      return {\n        success: true,\n        message: 'Email simulation completed (TEST MODE)',\n        emailData\n      };\n    }\n\n    // REAL EMAIL MODE: Use EmailJS\n    console.log('üìß Preparing to send email via EmailJS...');\n\n    // Check if EmailJS is properly configured\n    if (EMAILJS_CONFIG.serviceId === 'service_techpillar' || EMAILJS_CONFIG.templateId === 'template_techpillar' || EMAILJS_CONFIG.userId === 'user_techpillar') {\n      throw new Error('EmailJS not configured. Please update the EMAILJS_CONFIG with your real IDs.');\n    }\n\n    // Prepare template parameters for EmailJS\n    const templateParams = {\n      to_email: EMAIL_CONFIG.to,\n      from_name: formData.name,\n      from_email: formData.email,\n      company: formData.company || 'Individual',\n      service: ((_serviceOptions$find4 = serviceOptions.find(opt => opt.value === formData.service)) === null || _serviceOptions$find4 === void 0 ? void 0 : _serviceOptions$find4.label) || formData.service,\n      message: formData.message,\n      reply_to: formData.email,\n      subject: `${EMAIL_CONFIG.subjectPrefix}${((_serviceOptions$find5 = serviceOptions.find(opt => opt.value === formData.service)) === null || _serviceOptions$find5 === void 0 ? void 0 : _serviceOptions$find5.label) || formData.service} - ${formData.company || 'Individual'}`\n    };\n    console.log('üìß Template parameters:', templateParams);\n\n    // Send email using EmailJS\n    const result = await emailjs.send(EMAILJS_CONFIG.serviceId, EMAILJS_CONFIG.templateId, templateParams, EMAILJS_CONFIG.userId);\n    console.log('‚úÖ Email sent successfully via EmailJS:', result);\n    return {\n      success: true,\n      message: 'Email sent successfully via EmailJS',\n      result\n    };\n  } catch (error) {\n    console.error('‚ùå Error sending email via EmailJS:', error);\n\n    // Fallback: Try to send using the old method (simulation)\n    console.log('üîÑ Falling back to simulation...');\n    try {\n      const emailData = generateEmailTemplate(formData, serviceOptions);\n\n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.log('üìß Email data prepared (simulation):', {\n        to: emailData.to,\n        subject: emailData.subject,\n        from: emailData.from,\n        replyTo: emailData.replyTo\n      });\n      return {\n        success: true,\n        message: 'Email simulation completed (EmailJS not configured)',\n        emailData\n      };\n    } catch (fallbackError) {\n      console.error('‚ùå Fallback also failed:', fallbackError);\n      throw new Error('Failed to send email. Please check EmailJS configuration or contact support.');\n    }\n  }\n};\n\n// Alternative: Simple text email for basic email clients\nexport const generateSimpleEmailTemplate = (formData, serviceOptions) => {\n  var _serviceOptions$find6;\n  const serviceLabel = ((_serviceOptions$find6 = serviceOptions.find(opt => opt.value === formData.service)) === null || _serviceOptions$find6 === void 0 ? void 0 : _serviceOptions$find6.label) || formData.service;\n  return {\n    to: EMAIL_CONFIG.to,\n    from: EMAIL_CONFIG.from,\n    replyTo: formData.email,\n    subject: `${EMAIL_CONFIG.subjectPrefix}${serviceLabel} - ${formData.company || 'Individual'}`,\n    text: `\nNew Service Inquiry from TechPillar Website\n\nContact Information:\n- Name: ${formData.name}\n- Email: ${formData.email}\n${formData.company ? `- Company: ${formData.company}\\n` : ''}- Service: ${serviceLabel}\n\nMessage:\n${formData.message}\n\n---\nSent on: ${new Date().toLocaleDateString()}\nReply to: ${formData.email}\n    `\n  };\n};","map":{"version":3,"names":["emailjs","EMAIL_CONFIG","to","from","subjectPrefix","EMAILJS_CONFIG","serviceId","templateId","userId","TEST_MODE","generateEmailTemplate","formData","serviceOptions","_serviceOptions$find","serviceLabel","find","opt","value","service","label","company","timestamp","Date","toLocaleDateString","year","month","day","hour","minute","replyTo","email","subject","html","name","message","replace","text","sendContactFormEmail","_serviceOptions$find4","_serviceOptions$find5","_serviceOptions$find2","_serviceOptions$find3","console","log","emailData","Promise","resolve","setTimeout","alert","success","Error","templateParams","to_email","from_name","from_email","reply_to","result","send","error","fallbackError","generateSimpleEmailTemplate","_serviceOptions$find6"],"sources":["/Users/zani/Documents/GitHub/techpillar-portfolio/src/services/emailService.js"],"sourcesContent":["// Email service for TechPillar contact form\n// This service handles sending professional emails to pro.zainajmal@gmail.com\n\nimport emailjs from '@emailjs/browser';\n\n// Email configuration\nconst EMAIL_CONFIG = {\n  to: 'pro.zainajmal@gmail.com',\n  from: 'zany0381@gmail.com', // This will be your sending email\n  subjectPrefix: 'New Service Inquiry: '\n};\n\n// WORKING EMAILJS CONFIGURATION - Replace these with your actual IDs\n// To get these IDs, follow the QUICK_EMAIL_SETUP.md guide\nconst EMAILJS_CONFIG = {\n  serviceId: 'service_dh3ywir', // Replace with your actual service ID\n  templateId: 'template_odgf7en', // Replace with your actual template ID\n  userId: 'mdymL1mtK3BTTYscN' // Replace with your actual user ID\n};\n\n// TEST MODE: Set this to false when you have real EmailJS credentials\nconst TEST_MODE = false;\n\n// Professional email template generator\nexport const generateEmailTemplate = (formData, serviceOptions) => {\n  const serviceLabel = serviceOptions.find(opt => opt.value === formData.service)?.label || formData.service;\n  const company = formData.company || 'Individual';\n  const timestamp = new Date().toLocaleDateString('en-US', { \n    year: 'numeric', \n    month: 'long', \n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n\n  return {\n    to: EMAIL_CONFIG.to,\n    from: EMAIL_CONFIG.from,\n    replyTo: formData.email, // Allow direct reply to the customer\n    subject: `${EMAIL_CONFIG.subjectPrefix}${serviceLabel} - ${company}`,\n    html: `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>New Service Inquiry - TechPillar</title>\n        <style>\n          body { \n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; \n            line-height: 1.6; \n            color: #333; \n            margin: 0; \n            padding: 0; \n            background-color: #f8fafc;\n          }\n          .container { \n            max-width: 600px; \n            margin: 0 auto; \n            background: white;\n            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n            border-radius: 12px;\n            overflow: hidden;\n          }\n          .header { \n            background: linear-gradient(135deg, #60A5FA 0%, #93C5FD 100%); \n            color: white; \n            padding: 40px 30px; \n            text-align: center; \n          }\n          .header h1 { \n            margin: 0 0 10px 0; \n            font-size: 28px; \n            font-weight: 700;\n          }\n          .header p { \n            margin: 0; \n            font-size: 16px; \n            opacity: 0.9;\n          }\n          .content { \n            padding: 40px 30px; \n            background: white;\n          }\n          .field { \n            margin-bottom: 25px; \n          }\n          .label { \n            font-weight: 600; \n            color: #1e293b; \n            margin-bottom: 8px; \n            display: block; \n            font-size: 14px;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n          }\n          .value { \n            background: #f8fafc; \n            padding: 16px; \n            border-radius: 8px; \n            border-left: 4px solid #60A5FA; \n            font-size: 16px;\n            color: #334155;\n          }\n          .cta-section { \n            text-align: center; \n            margin: 40px 0; \n            padding: 30px;\n            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);\n            border-radius: 12px;\n          }\n          .cta-button { \n            background: #60A5FA; \n            color: white; \n            padding: 16px 32px; \n            text-decoration: none; \n            border-radius: 8px; \n            display: inline-block; \n            font-weight: 600;\n            font-size: 16px;\n            transition: all 0.3s ease;\n          }\n          .cta-button:hover { \n            background: #3B82F6; \n            transform: translateY(-2px);\n            box-shadow: 0 8px 25px rgba(96, 165, 250, 0.3);\n          }\n          .footer { \n            text-align: center; \n            margin-top: 40px; \n            color: #64748b; \n            font-size: 14px; \n            padding: 30px;\n            background: #f8fafc;\n            border-top: 1px solid #e2e8f0;\n          }\n          .priority-badge {\n            display: inline-block;\n            background: #ef4444;\n            color: white;\n            padding: 4px 12px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: 600;\n            margin-left: 12px;\n          }\n          .service-badge {\n            display: inline-block;\n            background: #10b981;\n            color: white;\n            padding: 6px 16px;\n            border-radius: 20px;\n            font-size: 14px;\n            font-weight: 600;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"container\">\n          <div class=\"header\">\n            <h1>üöÄ New Service Inquiry</h1>\n            <p>TechPillar has received a new service request</p>\n          </div>\n          \n          <div class=\"content\">\n            <div class=\"field\">\n              <span class=\"label\">üë§ Contact Person</span>\n              <div class=\"value\">${formData.name}</div>\n            </div>\n            \n            <div class=\"field\">\n              <span class=\"label\">üìß Email Address</span>\n              <div class=\"value\">${formData.email}</div>\n            </div>\n            \n            ${formData.company ? `\n            <div class=\"field\">\n              <span class=\"label\">üè¢ Company</span>\n              <div class=\"value\">${formData.company}</div>\n            </div>\n            ` : ''}\n            \n            <div class=\"field\">\n              <span class=\"label\">üéØ Service Interest</span>\n              <div class=\"value\">\n                <span class=\"service-badge\">${serviceLabel}</span>\n              </div>\n            </div>\n            \n            <div class=\"field\">\n              <span class=\"label\">üí¨ Project Details</span>\n              <div class=\"value\">${formData.message.replace(/\\n/g, '<br>')}</div>\n            </div>\n            \n            <div class=\"cta-section\">\n              <h3 style=\"margin: 0 0 20px 0; color: #1e293b;\">Ready to respond?</h3>\n              <a href=\"mailto:${formData.email}?subject=Re: ${EMAIL_CONFIG.subjectPrefix}${serviceLabel}\" class=\"cta-button\">\n                üìß Reply to ${formData.name}\n              </a>\n              <p style=\"margin: 15px 0 0 0; font-size: 14px; color: #64748b;\">\n                Click the button above to send a direct reply\n              </p>\n            </div>\n          </div>\n          \n          <div class=\"footer\">\n            <p><strong>This inquiry was sent from the TechPillar contact form</strong></p>\n            <p>üìÖ Received on ${timestamp}</p>\n            <p>üìç Form submitted from TechPillar website</p>\n            <hr style=\"border: none; border-top: 1px solid #e2e8f0; margin: 20px 0;\">\n            <p style=\"font-size: 12px; color: #94a3b8;\">\n              TechPillar Technology Solutions<br>\n              Empowering businesses through innovative technology\n            </p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `,\n    text: `\nNew Service Inquiry - TechPillar\n\nContact Person: ${formData.name}\nEmail Address: ${formData.email}\n${formData.company ? `Company: ${formData.company}\\n` : ''}Service Interest: ${serviceLabel}\n\nProject Details:\n${formData.message}\n\n---\nThis inquiry was sent from the TechPillar contact form on ${timestamp}.\nReply directly to: ${formData.email}\n    `\n  };\n};\n\n// Main email sending function using EmailJS\nexport const sendContactFormEmail = async (formData, serviceOptions) => {\n  try {\n    // TEST MODE: If enabled, just simulate email sending\n    if (TEST_MODE) {\n      console.log('üß™ TEST MODE: Simulating email sending...');\n      \n      const emailData = generateEmailTemplate(formData, serviceOptions);\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      console.log('üìß TEST MODE: Email would be sent to:', emailData.to);\n      console.log('üìß TEST MODE: Subject:', emailData.subject);\n      console.log('üìß TEST MODE: From:', formData.email);\n      console.log('üìß TEST MODE: Service:', serviceOptions.find(opt => opt.value === formData.service)?.label);\n      console.log('üìß TEST MODE: Message:', formData.message);\n      \n      // Show alert with email details (for testing)\n      alert(`üß™ TEST MODE: Email would be sent to pro.zainajmal@gmail.com\\n\\nSubject: ${emailData.subject}\\nFrom: ${formData.email}\\nService: ${serviceOptions.find(opt => opt.value === formData.service)?.label}\\n\\nTo get real emails, follow the setup guide in QUICK_EMAIL_SETUP.md`);\n      \n      return {\n        success: true,\n        message: 'Email simulation completed (TEST MODE)',\n        emailData\n      };\n    }\n    \n    // REAL EMAIL MODE: Use EmailJS\n    console.log('üìß Preparing to send email via EmailJS...');\n    \n    // Check if EmailJS is properly configured\n    if (EMAILJS_CONFIG.serviceId === 'service_techpillar' || \n        EMAILJS_CONFIG.templateId === 'template_techpillar' || \n        EMAILJS_CONFIG.userId === 'user_techpillar') {\n      throw new Error('EmailJS not configured. Please update the EMAILJS_CONFIG with your real IDs.');\n    }\n    \n    // Prepare template parameters for EmailJS\n    const templateParams = {\n      to_email: EMAIL_CONFIG.to,\n      from_name: formData.name,\n      from_email: formData.email,\n      company: formData.company || 'Individual',\n      service: serviceOptions.find(opt => opt.value === formData.service)?.label || formData.service,\n      message: formData.message,\n      reply_to: formData.email,\n      subject: `${EMAIL_CONFIG.subjectPrefix}${serviceOptions.find(opt => opt.value === formData.service)?.label || formData.service} - ${formData.company || 'Individual'}`\n    };\n    \n    console.log('üìß Template parameters:', templateParams);\n    \n    // Send email using EmailJS\n    const result = await emailjs.send(\n      EMAILJS_CONFIG.serviceId,\n      EMAILJS_CONFIG.templateId,\n      templateParams,\n      EMAILJS_CONFIG.userId\n    );\n    \n    console.log('‚úÖ Email sent successfully via EmailJS:', result);\n    \n    return {\n      success: true,\n      message: 'Email sent successfully via EmailJS',\n      result\n    };\n    \n  } catch (error) {\n    console.error('‚ùå Error sending email via EmailJS:', error);\n    \n    // Fallback: Try to send using the old method (simulation)\n    console.log('üîÑ Falling back to simulation...');\n    \n    try {\n      const emailData = generateEmailTemplate(formData, serviceOptions);\n      \n      // Simulate API call delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      console.log('üìß Email data prepared (simulation):', {\n        to: emailData.to,\n        subject: emailData.subject,\n        from: emailData.from,\n        replyTo: emailData.replyTo\n      });\n      \n      return {\n        success: true,\n        message: 'Email simulation completed (EmailJS not configured)',\n        emailData\n      };\n      \n    } catch (fallbackError) {\n      console.error('‚ùå Fallback also failed:', fallbackError);\n      throw new Error('Failed to send email. Please check EmailJS configuration or contact support.');\n    }\n  }\n};\n\n// Alternative: Simple text email for basic email clients\nexport const generateSimpleEmailTemplate = (formData, serviceOptions) => {\n  const serviceLabel = serviceOptions.find(opt => opt.value === formData.service)?.label || formData.service;\n  \n  return {\n    to: EMAIL_CONFIG.to,\n    from: EMAIL_CONFIG.from,\n    replyTo: formData.email,\n    subject: `${EMAIL_CONFIG.subjectPrefix}${serviceLabel} - ${formData.company || 'Individual'}`,\n    text: `\nNew Service Inquiry from TechPillar Website\n\nContact Information:\n- Name: ${formData.name}\n- Email: ${formData.email}\n${formData.company ? `- Company: ${formData.company}\\n` : ''}- Service: ${serviceLabel}\n\nMessage:\n${formData.message}\n\n---\nSent on: ${new Date().toLocaleDateString()}\nReply to: ${formData.email}\n    `\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}