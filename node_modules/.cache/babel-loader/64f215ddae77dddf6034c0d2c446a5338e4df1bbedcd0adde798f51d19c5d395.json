{"ast":null,"code":"import { supabase } from '../config/supabase';\n\n// Fetch all categories\nexport const fetchCategories = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('categories').select('*').order('name');\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    return [];\n  }\n};\n\n// Fetch all projects\nexport const fetchProjects = async () => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('projects').select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `).order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching projects:', error);\n    return [];\n  }\n};\n\n// Fetch projects by category\nexport const fetchProjectsByCategory = async categorySlug => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('projects').select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `).eq('category.slug', categorySlug).order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching projects by category:', error);\n    return [];\n  }\n};\n\n// Fetch single project by ID\nexport const fetchProjectById = async projectId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('projects').select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `).eq('id', projectId).single();\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error fetching project:', error);\n    return null;\n  }\n};\n\n// Search projects\nexport const searchProjects = async searchTerm => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('projects').select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `).or(`title.ilike.%${searchTerm}%, description.ilike.%${searchTerm}%, technologies.cs.{${searchTerm}}`).order('created_at', {\n      ascending: false\n    });\n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error searching projects:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["supabase","fetchCategories","data","error","from","select","order","console","fetchProjects","ascending","fetchProjectsByCategory","categorySlug","eq","fetchProjectById","projectId","single","searchProjects","searchTerm","or"],"sources":["/Users/zani/Documents/GitHub/techpillar-portfolio/src/services/supabaseService.js"],"sourcesContent":["import { supabase } from '../config/supabase';\n\n// Fetch all categories\nexport const fetchCategories = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('categories')\n      .select('*')\n      .order('name');\n    \n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching categories:', error);\n    return [];\n  }\n};\n\n// Fetch all projects\nexport const fetchProjects = async () => {\n  try {\n    const { data, error } = await supabase\n      .from('projects')\n      .select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `)\n      .order('created_at', { ascending: false });\n    \n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching projects:', error);\n    return [];\n  }\n};\n\n// Fetch projects by category\nexport const fetchProjectsByCategory = async (categorySlug) => {\n  try {\n    const { data, error } = await supabase\n      .from('projects')\n      .select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `)\n      .eq('category.slug', categorySlug)\n      .order('created_at', { ascending: false });\n    \n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error fetching projects by category:', error);\n    return [];\n  }\n};\n\n// Fetch single project by ID\nexport const fetchProjectById = async (projectId) => {\n  try {\n    const { data, error } = await supabase\n      .from('projects')\n      .select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `)\n      .eq('id', projectId)\n      .single();\n    \n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error fetching project:', error);\n    return null;\n  }\n};\n\n// Search projects\nexport const searchProjects = async (searchTerm) => {\n  try {\n    const { data, error } = await supabase\n      .from('projects')\n      .select(`\n        *,\n        category:categories(name, slug, color, icon)\n      `)\n      .or(`title.ilike.%${searchTerm}%, description.ilike.%${searchTerm}%, technologies.cs.{${searchTerm}}`)\n      .order('created_at', { ascending: false });\n    \n    if (error) throw error;\n    return data || [];\n  } catch (error) {\n    console.error('Error searching projects:', error);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}